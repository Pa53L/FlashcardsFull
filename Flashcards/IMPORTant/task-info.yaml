type: edu
custom_name: stage7
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.correct().also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.wrong(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.correct();
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.wrong("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (!result.isCorrect) {
                            return CheckResult.wrong(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.correct();
        }
    }

    fun dialogTest(vararg phrases: Phrase, consoleArgs: Array<String> = emptyArray()): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
                .addArguments(*consoleArgs)
    }
  learner_created: false
- name: test/common/FlashcardsStage7Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import flashcards.Main
    import java.io.File


    abstract class FlashcardsStage7Test : StageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("capitalsNew.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exportCards("capitalsNew.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    addCapital("France", "Paris"),
                    addCapital("Russia", "Moscow"),
                    askCards("France", "??", ""),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    addCapital("Japan", "Tokyo"),
                    askCards("Moscow", "Paris", "Tokyo"),
                    exit(),
                    exportArg(3),
                    consoleArgs = arrayOf("-import", "capitals.txt", "-export", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(3, *capitals()),
                    askCards("Moscow", "Paris", "Tokyo"),
                    removeCapital("Japan"),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt", "-import", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    exit(),
                    consoleArgs = arrayOf("-import", "capitals.txt")
            )

            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun importArg(count: Int, vararg cards: Pair<String, String>) =
                containing("$count cards have been loaded",
                        updateContext = { ctx ->
                            cards.forEach { (card, def) ->
                                ctx.addCard(card, def)
                                ctx.wrongCards.removeAll(listOf(card))
                            }
                        })

        fun exportArg(count: Int) = containing("$count cards have been saved")


        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.wrong("The log file $fileName does not exist.")
                        }
                        CheckResult.correct();
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.correct();
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx -> ctx.removeCard(card) })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.wrong("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.wrong("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.correct();
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.wrong("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnweredCapitals.clear()
                                    wrongAnweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage7Test;

    public class FlashcardsTest extends FlashcardsStage7Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;

    import java.io.*;
    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class Main implements Serializable {
        public static Map<String, String> cards = new LinkedHashMap<>();
        public static Map<String, Integer> hardCard = new LinkedHashMap<>();
        public static Scanner sc = new Scanner(System.in);
        public static ArrayList<String> logArray = new ArrayList<>();
        public static String menu = "Input the action (add, remove, import, export, ask, exit, " +
                                    "log, hardest card, reset stats):";


        public static void main(String[] args) throws IOException {
            System.out.println(menu);
            logArray.add(menu);
            String action = sc.nextLine();
            logArray.add(action);

            while (!action.equals("exit")) {
                switch (action) {
                    case "add":
                        add();
                        break;
                    case "remove":
                        cardRemove();
                        break;
                    case "import":
                        cardImport();
                        break;
                    case "export":
                        cardExport();
                        break;
                    case "ask":
                        questions();
                        break;
                    case "log":
                        saveLog(logArray);
                        break;
                    case "hardest card":
                        hardestCard();
                        break;
                    case "reset stats":
                        resetStats();
                        break;
                    default:
                        System.out.println(menu);
                        logArray.add(menu);
                }
                action = sc.nextLine();
                logArray.add(action);
            }
            exit();
        }

        private static void saveLog(ArrayList<String> logArray) {
            System.out.println("File name:");
            logArray.add("File name:");
            String path = sc.nextLine();
            logArray.add(path);
            File file = new File(path);

            try (FileWriter writer = new FileWriter(file, false)) {
                for (String s : logArray) {
                    writer.write(s + "\n");
                }
                System.out.println("The log has been saved.");
                logArray.add("The log has been saved.");
            } catch (IOException e) {
                System.out.println(e.getMessage());
                logArray.add(e.getMessage());
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void hardestCard() {
            int maxErrors = 0;
            int countCards = 0;

            for (String key : hardCard.keySet()) {
                if (hardCard.get(key) > maxErrors) {
                    maxErrors = hardCard.get(key);
                }
            }
            for (String key : hardCard.keySet()) {
                if (hardCard.get(key) == maxErrors && maxErrors > 0) {
                    countCards++;
                }
            }
            if (countCards == 1) {
                String str = null;
                for (String s : hardCard.keySet()) {
                    if (Integer.valueOf(maxErrors).equals(hardCard.get(s))) {
                        str = s;
                    }
                }
                System.out.println("The hardest card is \"" + str +
                        "\". You have " + maxErrors + " errors answering it.");
                logArray.add("The hardest card is \"" + str + "\". You have " + maxErrors + " errors answering it.");
            } else if (countCards > 1) {
                System.out.print("The hardest cards are \"");
                StringBuilder resString = new StringBuilder("The hardest cards are \"");
                for (String key : hardCard.keySet()){
                    if (countCards > 1) {
                        System.out.print(key + "\", \"");
                        resString.append(key).append("\", \"");
                    } else {
                        System.out.print(key);
                        resString.append(key);
                    }
                    countCards--;
                }
                System.out.println("\". You have " + maxErrors + " errors answering them.");
                resString.append("\". You have ").append(maxErrors).append(" errors answering them.");
                String finalString = resString.toString();
                logArray.add(finalString);
            } else {
                System.out.println("There are no cards with errors.");
                logArray.add("There are no cards with errors.");
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void resetStats() {
            try {
                for (String s : hardCard.keySet()) {
                    hardCard.replace(s, 0);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            System.out.println("Card statistics has been reset.");
            logArray.add("Card statistics has been reset.");
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void cardRemove() {
            System.out.println("The card:");
            logArray.add("The card");
            String cardToRemove = sc.nextLine();
            logArray.add(cardToRemove);

            if (cards.containsKey(cardToRemove)) {
                cards.remove(cardToRemove);
                hardCard.remove(cardToRemove);
                System.out.println("The card has been removed.");
                logArray.add("The card has been removed.");
            } else {
                System.out.println("Can't remove \"" + cardToRemove + "\": there is no such card.");
                logArray.add("Can't remove \"" + cardToRemove + "\": there is no such card.");
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void questions() {
            System.out.println("How many times to ask?");
            logArray.add("How many times to ask?");
            int numOfQuestions = Integer.parseInt(sc.nextLine());
            logArray.add(Integer.toString(numOfQuestions));
            String answer;
            int j = 0;

            while (j < numOfQuestions) {
                for (String key : cards.keySet()) {
                    System.out.println("Print the definition of \"" + key + "\":");
                    logArray.add("Print the definition of \"" + key + "\":");
                    answer = sc.nextLine();
                    logArray.add(answer);
                    if (cards.get(key).equals(answer)) {
                        System.out.println("Correct answer");
                        logArray.add("Correct answer");
                    } else {
                        hardCard.replace(key, (hardCard.get(key) + 1));
                        if (cards.containsValue(answer)) {
                            String goodAnswer = null;
                            for (var entry : cards.entrySet()) {
                                if (entry.getValue().equals(answer)) {
                                    goodAnswer = entry.getKey();
                                }
                            }
                            System.out.println("Wrong answer. The correct one is \"" + cards.get(key)
                                    + "\", you've just written the definition of \"" + goodAnswer + "\".");
                            logArray.add("Wrong answer. The correct one is \"" + cards.get(key)
                                    + "\", you've just written the definition of \"" + goodAnswer + "\".");
                        } else {
                            System.out.println("Wrong answer. The correct one is \"" + cards.get(key) + "\".");
                            logArray.add("Wrong answer. The correct one is \"" + cards.get(key) + "\".");
                        }
                    }
                    j++;
                    if (j == numOfQuestions) { break; }
                }
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void cardExport() throws IOException {
            System.out.println("File name:");
            logArray.add("File name:");
            String path = sc.nextLine();
            logArray.add(path);
            SavedFile savedFile = new SavedFile(cards, hardCard);
            FileOutputStream fileOutputStream = new FileOutputStream(path);
            try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(savedFile);
            } catch (Exception e) {
                System.out.println(e.getMessage());
                logArray.add(e.getMessage());
            }
            int i = 0;
            for (var entry : cards.entrySet()) {
                i++;
            }
            System.out.println(i + " cards have been saved.");
            logArray.add(i + " cards have been saved.");
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void cardImport() {
            System.out.println("File name:");
            logArray.add("File name:");
            String fileToLoad = sc.nextLine();
            logArray.add(fileToLoad);
            int i = 0;

            try (FileInputStream fileInputStream = new FileInputStream(fileToLoad)) {
                ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
                SavedFile savedFile = (SavedFile) objectInputStream.readObject();
                for (var entry : savedFile.getCards().keySet()) {
                    if (!cards.containsKey(entry)) {
                        cards.put(entry, savedFile.cards.get(entry));
                    } else if (cards.containsKey(entry) && !cards.get(entry).equals(savedFile.cards.get(entry))) {
                        cards.replace(entry, savedFile.cards.get(entry));
                    }
                    i++;
                }

                for (var entry : savedFile.getHardCard().keySet()) {
                    if (!hardCard.containsKey(entry)) {
                        hardCard.put(entry, savedFile.hardCard.get(entry));
                    } else {
                        hardCard.replace(entry, savedFile.hardCard.get(entry));
                    }
                }
                System.out.println(i + " cards have been loaded.");
                logArray.add(i + " cards have been loaded.");
            } catch (Exception e) {
                System.out.println("File not found");
                logArray.add("File not found");
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        private static void add() {
            System.out.println("The card:");
            logArray.add("The card");
            String card = sc.nextLine();
            logArray.add(card);
            String definition;

            if (cards.containsKey(card)) {
                System.out.println("The card \"" + card + "\" already exists.");
                logArray.add("The card \\\"\" + card + \"\\\" already exists.");
            } else {
                System.out.println("The definition of the card:");
                logArray.add("The definition of the card:");
                definition = sc.nextLine();
                logArray.add(definition);
                if (cards.containsValue(definition)) {
                    System.out.println("The definition \"" + definition + "\" already exists.");
                    logArray.add("The definition \"" + definition + "\" already exists.");
                } else {
                    cards.put(card, definition);
                    hardCard.put(card, 0);
                    System.out.println("The pair (\"" + card + "\":\"" + definition + "\") has been added.");
                    logArray.add("The pair (\"" + card + "\":\"" + definition + "\") has been added.");
                }
            }
            System.out.println(menu);
            logArray.add(menu);
        }

        public static void exit() {
            System.out.println("Bye bye!");
            logArray.add("Bye bye!");
            System.exit(0);
        }
    }

    class SavedFile implements Serializable {
        private static final long serialVersionUID = 1L;
        Map<String, String> cards;
        Map<String, Integer> hardCard;
        SavedFile(Map<String, String> car, Map<String, Integer> hardCar) {
            this.cards = car;
            this.hardCard = hardCar;
        }

        public Map<String, String> getCards() {
            return cards;
        }

        public Map<String, Integer> getHardCard() {
            return hardCard;
        }
    }
  learner_created: true
- name: capitals.txt
  visible: true
  text: "��\0\x05sr\0\x14flashcards.SavedFile\0\0\0\0\0\0\0\x01\x02\0\x02L\0\x05cardst\0\
    \x0fLjava/util/Map;L\0\bhardCardq\0~\0\x01xpsr\0\x17java.util.LinkedHashMap4�\
    N\\\x10l��\x02\0\x01Z\0\vaccessOrderxr\0\x11java.util.HashMap\x05\a���\x16`�\x03\
    \0\x02F\0\nloadFactorI\0\tthresholdxp?@\0\0\0\0\0\fw\b\0\0\0\x10\0\0\0\x02t\0\x06\
    Francet\0\x05Parist\0\x06Russiat\0\x06Moscowx\0sq\0~\0\x03?@\0\0\0\0\0\fw\b\0\0\
    \0\x10\0\0\0\x02q\0~\0\x06sr\0\x11java.lang.Integer\x12⠤���8\x02\0\x01I\0\x05\
    valuexr\0\x10java.lang.Number���\x1d\v���\x02\0\0xp\0\0\0\x05q\0~\0\bq\0~\0\n\
    x\0"
  learner_created: true
- name: testLog.txt
  visible: true
  text: |
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    There are no cards with errors.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    add
    The card
    France
    The definition of the card:
    Paris
    The pair ("France":"Paris") has been added.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    France
    Wrong answer. The correct one is "Paris".
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest card is "France". You have 2 errors answering it.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    reset stats
    Card statistics has been reset.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    There are no cards with errors.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    add
    The card
    Russia
    The definition of the card:
    Moscow
    The pair ("Russia":"Moscow") has been added.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Print the definition of "Russia":
    ??
    Wrong answer. The correct one is "Moscow".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest cards are "France", "Russia". You have 1 errors answering them.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Print the definition of "Russia":
    ??
    Wrong answer. The correct one is "Moscow".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest cards are "France", "Russia". You have 2 errors answering them.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Print the definition of "Russia":
    ??
    Wrong answer. The correct one is "Moscow".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest cards are "France", "Russia". You have 3 errors answering them.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Print the definition of "Russia":
    ??
    Wrong answer. The correct one is "Moscow".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest cards are "France", "Russia". You have 4 errors answering them.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    ask
    How many times to ask?
    2
    Print the definition of "France":
    ??
    Wrong answer. The correct one is "Paris".
    Print the definition of "Russia":
    ??
    Wrong answer. The correct one is "Moscow".
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    hardest card
    The hardest cards are "France", "Russia". You have 5 errors answering them.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    export
    File name:
    capitals.txt
    2 cards have been saved.
    Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):
    log
    File name:
    testLog.txt
  learner_created: false
- name: capitalsNew.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/238/implement
status: Solved
record: 7
